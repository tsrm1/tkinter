from tkinter import *
from tkinter import ttk                     # подключаем пакет ttk, улучшенные виджеты
 
root = Tk()                                 # Инициалиция окна
root.title("Main window")                   # название окна
root.iconbitmap(default="ico/favicon.ico")  # установка иконки для окна
root.geometry("300x350+400+200")            # "Ширина x Высота + Смещение по X + Смещение по Y"
root.minsize(200,150)                       # минимальные размеры: ширина - 200, высота - 150
###############################################################################################


# Виджет Label представляет текстовую метку. 
# Этот элемент позволяет выводить статический текст без возможности редактирования
# Label(master, options)
# Параметр master представляет ссылку на родительский контейнер, а параметр options 
# anchor: устанавливает позиционирование текста
# background: фоновый цвет
# borderwidth: толщина границы метки
# cursor: курсор указателя мыши при наведении на метку
# font: шрифт текста
# foreground: цвет текста
# height: высота виджета
# image: ссылка на изображение, которое отображается на метке
# justify: устанавливает выравнивание текста. Значение LEFT выравнивает текст по левому краю, CENTER - по центру, RIGHT - по правому краю
# pading: отступы от границ вилжета до его текста
# relief: определяет тип границы, по умолчанию значение FLAT
# text: устанавливает текст метки
# textvariable: устанавливает привязку к элементу StringVar
# underline: указывает на номер символа в тексте метки, который подчеркивается. По умолчанию значение -1, то есть никакой символ не подчеркивается
# width: ширина виджета
# wraplength: при положительном значении строки текста будут переносится для вмещения в пространство виджета


label = ttk.Label(text="Hello World")
label.pack()


# Установка шрифта в виде
# font = ("имя шрифта", размер_шрифта)
label = ttk.Label(text="Hello World", font=("Arial", 14))
label.pack()

# Стилизация
# По умолчанию метка не имеет границы. 
# Для установки толщины границы используется параметр borderwidth, 
# при этом нам также надо установить тип границы с помощью параметра releaf, 
# который может принимать значения: 
# "flat" - без рамки
# "raised" - вид кнопки
# "sunken" - вид нажатой кнопки
# "ridge", 
# "solid" - сплошной
# "groove"
label = ttk.Label(text="Hello World", borderwidth=4, relief="groove", padding=8)
label.pack()


# Установка цвета фона и текста:
label = ttk.Label(text="Hello World", background="#FFCDD2", foreground="#B71C1C", padding=8)
label.pack()

# Установка изображения
# создание объекта PhotoImage, в конструктор которого передается путь к изображению:
logo = PhotoImage(file="./ico/icon2.png")


# # изображение без текста
# label = ttk.Label(image=logo) 


# изображение с текстом
label = ttk.Label(image=logo, text="MyLogo", compound="top") 
# параметр compound,
# top: изображение поверх текста
# bottom: изображение под текстом
# left: изображение слева от текста
# right: изображение справа от текста
# none: при наличии изображения отображается только изображение
# text: отображается только текст
# image: отображается только изображение



label.pack()


root.mainloop()
